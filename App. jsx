import React, { useState } from "react";

const App = () => {
  // Q1:
  const [inputValue, setInputValue] = useState("");
  const [isHovering, setIsHovering] = useState(false);
  const [hoverText, setHoverText] = useState("Hover Over Me");

  // Q2:
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [termsAccepted, setTermsAccepted] = useState(false);

  //Q3:
  const [show, setShow] = useState(false);

  //Q4:
  const [items, setItems] = useState([]);
  const [newItem, setNewItem] = useState("");
  const [filter, setFilter] = useState("");

  //Q5:
  const [boxes, setBoxes] = useState([
    { id: 1, color: "Red", size: 100 },
    { id: 2, color: "Yellow", size: 100 },
    { id: 3, color: "Green", size: 100 },
  ]);

  //Q1:
  const handleClick = () => {
    console.log("Hello");
  };

  const handleInputChange = (event) => {
    setInputValue(event.target.value);
    console.log(`Input Value: ${event.target.value}`);
  };

  const handleMouseEnter = () => {
    setIsHovering(true);
    setHoverText("Hovered");
  };

  const handleMouseLeave = () => {
    setIsHovering(false);
    setHoverText("Hover Over Me");
  };

  //Q2:
  const handleSubmit = (event) => {
    if (termsAccepted) {
      console.log("Name:", name, "Description:", description);
    } else {
      console.log("Please Accept Terms & Conditions");
    }
  };

  //  Q4:
  const handleAddItem = () => {
    if (newItem.trim() !== "") {
      setItems([...items, newItem]);
      setNewItem("");
    }
  };

  const handleFilterChange = (event) => {
    setFilter(event.target.value);
  };

  const filteredItems = items.filter((item) =>
    item.toLowerCase().includes(filter.toLowerCase())
  );

  //Q5:
  const handleBoxClick = (id) => {
    setBoxes((prevBoxes) => {
      return prevBoxes.map((box) => {
        if (box.id === id) {
          return { ...box, color: getRandomColor() };
        }
        return box;
      });
    });
  };

  const handleBoxDoubleClick = (id) => {
    setBoxes((prevBoxes) => {
      return prevBoxes.map((box) => {
        if (box.id === id) {
          return { ...box, size: box.size * 1.5 };
        }
        return box;
      });
    });
  };

  const handleBoxRightClick = (id) => {
    setBoxes((prevBoxes) => {
      return prevBoxes.map((box) => {
        if (box.id === id) {
          return { ...box, color: "blue", size: 100 };
        }
        return box;
      });
    });
  };

  const getRandomColor = () => {
    const letters = "0123456789ABCDEF";
    let color = "#";
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  };

  return (
    <>
      {/* Q1: Basic Event Handling */}
      <div>
        <p style={{ fontFamily: "Bahnschrift" }}>Q1: Basic Event Handling</p>
        <button onClick={handleClick}>Click Me</button>
        <input
          type="text"
          value={inputValue}
          placeholder="Type Something...."
          onChange={handleInputChange}
        />
        <div
          style={{
            backgroundColor: isHovering ? "black" : "white",
            color: isHovering ? "yellow" : "red",
          }}
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
        >
          {hoverText}
        </div>
      </div>

      <hr />

      {/* Q2; Controlled Components */}

      <div>
        <p style={{ fontFamily: "Bahnschrift" }}>Q2; Controlled Components</p>
        <div style={{ backgroundColor: "Red" }}>
          <strong>Form:</strong>
          <br></br>
          <strong>Name:</strong>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
          ></input>
          <br></br>
          <strong>Content:</strong>
          <br></br>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          ></textarea>
          <br></br>
          <label>
            <input
              type="checkbox"
              checked={termsAccepted}
              onChange={(e) => setTermsAccepted(e.target.checked)}
            ></input>
            I accept terms and conditions<br></br>
          </label>
        </div>
        <button type="button" onClick={handleSubmit} disabled={!termsAccepted}>
          Submit
        </button>
      </div>

      <hr />

      {/* Q3: Conditional Rendering */}

      <div>
        <p style={{ fontFamily: "Bahnschrift" }}>Q3: Conditional Rendering</p>
        <button
          onClick={() => {
            setShow(true);
          }}
        >
          Show Paragraph
        </button>
        {show && (
          <p style={{ fontFamily: "bahnschrift" }}>
            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quibusdam,
            odit quidem dicta ab quam eaque sapiente repellendus accusamus,
            mollitia ipsam magni laboriosam amet facilis blanditiis enim
            exercitationem hic delectus velit, non nemo ipsum laudantium
            consectetur? Magnam doloremque aut tempore, quidem tempora obcaecati
            in doloribus adipisci quaerat eius impedit dolores dignissimos
            quibusdam accusantium harum voluptas, nobis id molestias! Odio
            numquam cum fugit saepe aliquam praesentium dolor! Ullam placeat
            suscipit nostrum maiores qui quasi explicabo nihil cum quos. Nostrum
            modi repellat animi maxime deserunt distinctio architecto asperiores
            beatae corrupti porro laudantium autem explicabo dolore earum, nulla
            illum commodi temporibus quos amet rem? Laudantium necessitatibus
            quasi nihil velit. Esse nulla accusamus quia doloribus aliquid
            libero ullam voluptate assumenda hic repudiandae voluptatibus sequi
            officiis architecto voluptatum, temporibus molestias! Tenetur sequi
            laudantium, consectetur perspiciatis laborum ipsa aliquam ipsum
            itaque ullam impedit! Neque in aut quae tempore maxime ipsam
            officiis quas, cumque reiciendis veritatis temporibus excepturi,
            unde impedit ea adipisci culpa iste! Aspernatur aliquam fugiat
            adipisci eaque et excepturi explicabo quasi tempore at quod ullam
            omnis, dicta magnam quos nostrum. Nesciunt, cum eligendi omnis
            itaque totam labore, nihil, repellat neque consequuntur quis iure
            libero. Perspiciatis exercitationem incidunt obcaecati odio
            recusandae libero totam voluptas error quod nostrum!
          </p>
        )}
        <br></br>
        <button
          onClick={() => {
            setShow(false);
          }}
        >
          Hide Paragraph
        </button>
      </div>

      <hr />

      {/* Q4: List Handling & Event Handling */}

      <div>
        <p style={{ fontFamily: "Bahnschrift" }}>
          Q4: List Handling & Event Handling
        </p>
        <h3>List Rendering and Filtering</h3>
        <input
          type="text"
          placeholder="Add an item"
          value={newItem}
          onChange={(e) => setNewItem(e.target.value)}
        />

        <button onClick={handleAddItem}>Add</button>

        <input
          type="text"
          placeholder="Filter items"
          value={filter}
          onChange={handleFilterChange}
        />
        <ul>
          {filteredItems.map((item, index) => (
            <li key={index}>{item}</li>
          ))}
        </ul>
      </div>

      <hr />

      {/* Q5: Dynamic Styling & Event Handling */}

      <div>
        <p style={{ fontFamily: "Bahnschrift" }}>
          Q5: Dynamic Styling & Event Handling
        </p>
        {boxes.map((box) => (
          <div
            key={box.id}
            style={{
              width: box.size,
              height: box.size,
              backgroundColor: box.color,
              display: "inline-block",
              margin: "10px",
            }}
            onClick={() => handleBoxClick(box.id)}
            onDoubleClick={() => handleBoxDoubleClick(box.id)}
            onContextMenu={(e) => {
              handleBoxRightClick(box.id);
            }}
          />
        ))}
      </div>
    </>
  );
};

export default App;
